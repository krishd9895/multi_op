import os
import re
from PIL import Image
from io import BytesIO
from PyPDF2 import PdfReader, PdfWriter, PdfMerger
import zipfile
import rarfile
import shutil
import py7zr
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# Pyrogram client initialization
api_id = os.environ.get('API_ID')
api_hash = os.environ.get('API_HASH')
bot_token = os.environ.get('Bot_token')

app = Client("pyrogram_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# Session data for image to PDF conversion
user_images = {}
user_pdf_name = {}

# Settings for image resize
user_settings = {}

# Processing status for PDF splitting
processing_status = {}

# PDF merger objects
pdfs_received = []
pdfs_received_messages = []
progress_message = None
merge_in_progress = False

# Helper functions

def get_unique_file_path(file_path):
    base_dir = os.path.dirname(file_path)
    base_name, ext = os.path.splitext(os.path.basename(file_path))
    suffix = 1
    while os.path.exists(file_path):
        file_path = os.path.join(base_dir, f"{base_name}_{suffix}{ext}")
        suffix += 1
    return file_path

# Command handlers

@app.on_message(filters.command("help"))
async def handle_help(client, message):
    help_text = """
This bot can perform various operations with PDF files and images.

**PDF Operations:**
/mergepdf - Merge multiple PDF files into a single PDF.

/splitpdf - Split a PDF file into individual pages.
    Reply to a PDF file with the '/splitpdf' command.

**Image Operations:**
/resizeimage - Resize an image.

**Image to PDF:**
/image2pdf - convert images to pdf.

**Archive Operations:**
/unarchive - Unarchive a compressed file (zip, rar, 7z).
"""
    await message.reply_text(help_text, parse_mode="Markdown")

@app.on_message(filters.command("mergepdf"))
async def handle_mergepdf(client, message):
    global pdfs_received, pdfs_received_messages, progress_message, merge_in_progress
    pdfs_received = []
    pdfs_received_messages = []
    progress_message = None
    merge_in_progress = True
    await message.reply_text("Please send the PDFs one by one. Send 'DONE' when finished.", parse_mode="Markdown")

@app.on_message(filters.document & filters.mime_type("application/pdf"))
async def handle_pdf(client, message):
    global pdfs_received, pdfs_received_messages, progress_message, merge_in_progress
    if merge_in_progress:
        file_size = message.document.file_size
        if file_size > 5 * 1024 * 1024:
            await message.reply_text("File size exceeds the limit of 5 MB")
            return

        if len(pdfs_received) >= 5:
            await message.reply_text("Maximum file limit of 5 reached. Please send 'done' to start merging.")
            return

        pdfs_received.append((message.document.file_id, file_size))
        count = len(pdfs_received)
        if pdfs_received_messages:
            try:
                await client.delete_messages(message.chat.id, pdfs_received_messages[-1].message_id)
                pdfs_received_messages.pop()
            except:
                pass
        reply = await message.reply_text(f"{count} PDFs received so far. Please send 'DONE' when finished.", parse_mode="Markdown")
        pdfs_received_messages.append(reply)

@app.on_message(filters.text & filters.regex("^DONE$", flags=re.IGNORECASE))
async def handle_merge(client, message):
    global pdfs_received, pdfs_received_messages, progress_message, merge_in_progress
    if merge_in_progress:
        merge_in_progress = False
        merger = PdfMerger()

        if not pdfs_received:
            await message.reply_text("No PDFs received. Send the PDFs first.")
            return

        total_size = sum(size for _, size in pdfs_received)
        if total_size > 15 * 1024 * 1024:
            await message.reply_text("Total file size exceeds the limit of 15 MB. Please send smaller PDFs.")
            return

        for msg in pdfs_received_messages:
            try:
                await client.delete_messages(message.chat.id, msg.message_id)
            except:
                pass

        progress_message = await message.reply_text("Merging in progress...")

        for index, (file_id, _) in enumerate(pdfs_received):
            file_info = await client.get_file(file_id)
            downloaded_file = await client.download_media(file_info)
            file_path = os.path.join('merged_pdfs', f"file_{index}.pdf")

            with open(file_path, 'wb') as f:
                f.write(downloaded_file)

            merger.append(file_path)

        merged_file_path = get_unique_file_path('merged_pdfs/merged.pdf')
        merger.write(merged_file_path)
        merger.close()

        try:
            with open(merged_file_path, 'rb') as f:
                await client.send_document(message.chat.id, f)

            merged_count = len(pdfs_received)
            await message.reply_text(f"Merging completed. {merged_count} PDFs merged.")

        except Exception as e:
            await message.reply_text("Failed to send the merged PDF.")

        # Clean up
        for index in range(len(pdfs_received)):
            file_path = os.path.join('merged_pdfs', f"file_{index}.pdf")
            if os.path.exists(file_path):
                os.remove(file_path)

        if os.path.exists(merged_file_path):
            os.remove(merged_file_path)

        try:
            await client.delete_messages(message.chat.id, progress_message.message_id)
        except:
            pass

        pdfs_received = []
        pdfs_received_messages = []

        shutil.rmtree('merged_pdfs', ignore_errors=True)

    else:
        await message.reply_text("Invalid command. Send '/help' for more information.")

@app.on_message(filters.command("unarchive"))
async def handle_unarchive_command(client, message):
    await message.reply_text("Please upload a .zip, .rar, or .7z file to unarchive.")

@app.on_message(filters.document & ~filters.mime_type("application/pdf"))
async def handle_document(client, message):
    file_name = message.document.file_name
    if file_name.endswith('.zip') or file_name.endswith('.rar') or file_name.endswith('.7z'):
        try:
            await message.reply_text("File received. Extracting...")

            file_info = await client.get_file(message.document.file_id)
            downloaded_file = await client.download_media(file_info)

            with open(file_name, 'wb') as new_file:
                new_file.write(downloaded_file)

            if file_name.endswith('.zip'):
                destination_dir = 'extracted_files_zip'
                unzip_file(file_name, destination_dir)
            elif file_name.endswith('.rar'):
                destination_dir = 'extracted_files_rar'
                unrar_file(file_name, destination_dir)
            elif file_name.endswith('.7z'):
                destination_dir = 'extracted_files_7z'
                un7z_file(file_name, destination_dir)

            for subdir, _, _ in os.walk(destination_dir):
                if subdir != destination_dir:
                    await message.reply_text(f"Files in {os.path.relpath(subdir, destination_dir)}:")
                    await send_files_in_directory(client, message.chat.id, subdir)

            await message.reply_text("Extraction complete.")

            os.remove(file_name)
            shutil.rmtree(destination_dir)

        except ValueError as e:
            await message.reply_text(f"Error: {e}")
        except Exception as e:
            await message.reply_text(f"An error occurred: {e}")
            if os.path.exists(file_name):
                os.remove(file_name)

def unzip_file(file_path, destination_dir):
    try:
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            zip_ref.extractall(destination_dir)
    except zipfile.BadZipFile:
        os.remove(file_path)
        raise ValueError("The provided ZIP file is corrupted.")

def unrar_file(file_path, destination_dir):
    try:
        with rarfile.RarFile(file_path, 'r') as rar_ref:
            rar_ref.extractall(destination_dir)
    except rarfile.BadRarFile:
        os.remove(file_path)
        raise ValueError("The provided RAR file is corrupted.")

def un7z_file(file_path, destination_dir):
    try:
        with py7zr.SevenZipFile(file_path, mode='r') as archive:
            archive.extractall(destination_dir)
    except py7zr.exceptions.Bad7zFile:
        os.remove(file_path)
        raise ValueError("The provided 7z file is corrupted.")

async def send_file(client, chat_id, file_path):
    with open(file_path, 'rb') as file:
        await client.send_document(chat_id, file)

async def send_files_in_directory(client, chat_id, directory_path):
    files = [f for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))]
    for file in files:
        await send_file(client, chat_id, os.path.join(directory_path, file))

@app.on_message(filters.command("splitpdf"))
async def handle_split_pdf(client, message):
    if not message.reply_to_message or not message.reply_to_message.document:
        await message.reply_text("Please reply to a PDF file with /splitpdf command.")
        return

    replied_document = message.reply_to_message.document
    file_id = replied_document.file_id
    file_size = replied_document.file_size
    file_name = replied_document.file_name

    if not file_name.lower().endswith('.pdf'):
        await message.reply_text("Invalid file format. Please send a PDF file.")
        return

    if file_size > 20000000:
        await message.reply_text("Sorry, the maximum file size allowed is 20 MB.")
        return

    if message.chat.id in processing_status and processing_status[message.chat.id]:
        await message.reply_text("Sorry, another PDF file is currently being processed. Please wait for the current process to complete.")
        return

    processing_status[message.chat.id] = True
    await message.reply_text("PDF file received. Splitting process started...")

    file_info = await client.get_file(file_id)
    downloaded_file = await client.download_media(file_info)

    pdf_path = 'temp.pdf'
    with open(pdf_path, 'wb') as f:
        f.write(downloaded_file)

    pages = split_pdf_pages(pdf_path)

    for i, page in enumerate(pages):
        page_name = f'page_{i + 1}.pdf'
        with open(page_name, 'wb') as f:
            page.write(f)
        with open(page_name, 'rb') as f:
            await client.send_document(message.chat.id, f)

        os.remove(page_name)

    os.remove(pdf_path)
    processing_status[message.chat.id] = False
    await message.reply_text("Splitting process completed.")

def split_pdf_pages(file_path):
    input_pdf = PdfReader(file_path)
    pages = []
    for i in range(len(input_pdf.pages)):
        output = PdfWriter()
        output.add_page(input_pdf.pages[i])
        pages.append(output)
    return pages

@app.on_message(filters.command("image2pdf"))
async def start_image_to_pdf(client, message):
    chat_id = message.chat.id
    user_images[chat_id] = []
    await message.reply_text("Send the images you want to convert to PDF.\nWhen you're done, type 'go'.", parse_mode="Markdown")

@app.on_message(filters.photo)
async def handle_image(client, message):
    chat_id = message.chat.id
    if chat_id in user_images:
        file_info = await client.get_file(message.photo.file_id)
        downloaded_file = await client.download_media(file_info)

        filename = f"{chat_id}_{len(user_images[chat_id])}.jpg"
        with open(filename, 'wb') as new_file:
            new_file.write(downloaded_file)

        user_images[chat_id].append(filename)
        await message.reply_text(f"Received image {len(user_images[chat_id])}. Send more or type 'go'.", parse_mode="Markdown")

@app.on_message(filters.text & filters.regex("^go$", flags=re.IGNORECASE))
async def ask_pdf_name(client, message):
    chat_id = message.chat.id
    if chat_id not in user_images or not user_images[chat_id]:
        await message.reply_text("You haven't sent any images yet.")
        return

    await message.reply_text("Please send a name for your PDF file. If you want to skip, click /skip.")

@app.on_message(filters.text & ~filters.command("skip"))
async def set_pdf_name(client, message):
    chat_id = message.chat.id
    if chat_id in user_images:
        user_pdf_name[chat_id] = message.text.strip() + ".pdf"
        await create_pdf(client, message)

@app.on_message(filters.command("skip"))
async def skip_pdf_name(client, message):
    chat_id = message.chat.id
    if chat_id in user_images:
        user_pdf_name[chat_id] = "images.pdf"
        await create_pdf(client, message)

async def create_pdf(client, message):
    chat_id = message.chat.id
    if chat_id not in user_images or not user_images[chat_id]:
        await message.reply_text("You haven't sent any images yet.")
        return

    pdf_filename = user_pdf_name.get(chat_id, "images.pdf")
    images = [Image.open(img).convert('RGB') for img in user_images[chat_id]]
    total_pages = len(images)

    images[0].save(pdf_filename, save_all=True, append_images=images[1:])

    with open(pdf_filename, 'rb') as pdf_file:
        await client.send_document(chat_id, pdf_file)

    for img in user_images[chat_id]:
        os.remove(img)
    os.remove(pdf_filename)
    del user_images[chat_id]
    del user_pdf_name[chat_id]

    await message.reply_text(f"Your PDF has been created and sent! It contains {total_pages} pages.")

@app.on_message(filters.command("resizeimage"))
async def handle_resize_image_command(client, message):
    if not message.reply_to_message or not message.reply_to_message.photo:
        await message.reply_text("Please reply to an image with the /resizeimage command.")
        return

    photo_id = message.reply_to_message.photo.file_id
    file_info = await client.get_file(photo_id)
    downloaded_file = await client.download_media(file_info)

    image = Image.open(BytesIO(downloaded_file))

    user_settings[message.chat.id] = {
        'command_state': 'choose_modification',
        'image': image
    }

    image_details = f"Image Details:\n\n" \
                    f"File Name: {file_info.file_path}\n" \
                    f"File Size: {file_info.file_size / (1024 * 1024):.2f} MB " \
                    f"({file_info.file_size / 1024:.2f} KB)\n" \
                    f"Image Width: {image.width}px\n" \
                    f"Image Height: {image.height}px\n"

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="Modify File Size", callback_data="modify_file_size")],
        [InlineKeyboardButton(text="Modify File Dimensions", callback_data="modify_file_dimensions")]
    ])

    await message.reply_text(f"{image_details}\nPlease choose the modification option:", reply_markup=markup)

@app.on_callback_query()
async def handle_callback(client, callback_query):
    chat_id = callback_query.message.chat.id

    if chat_id in user_settings and user_settings[chat_id]['command_state'] == 'choose_modification':
        action = callback_query.data

        if action == 'modify_file_size':
            await callback_query.message.reply_text("Please enter the desired file size in kilobytes (KB):")
            user_settings[chat_id]['command_state'] = 'enter_file_size'
        elif action == 'modify_file_dimensions':
            await callback_query.message.reply_text("Please enter the desired width and height in pixels (separated by a space):")
            user_settings[chat_id]['command_state'] = 'enter_dimensions'

        await callback_query.answer()

@app.on_message(filters.text)
async def handle_text(client, message):
    chat_id = message.chat.id

    if chat_id in user_settings:
        if user_settings[chat_id]['command_state'] == 'enter_file_size':
            try:
                target_file_size = float(message.text.strip())

                image = user_settings[chat_id]['image']
                quality = 80
                while True:
                    output = BytesIO()
                    image.save(output, format='JPEG', quality=quality)
                    image_size = output.tell() / 1024
                    if image_size <= target_file_size:
                        break
                    quality -= 5

                output.seek(0)
                with open('resized_image.jpg', 'wb') as f:
                    f.write(output.read())

                with open('resized_image.jpg', 'rb') as f:
                    await client.send_photo(chat_id, f)

                resized_details = f"Resized Image Details:\n\n" \
                                  f"File Name: resized_image.jpg\n" \
                                  f"File Size: {image_size:.2f} KB\n" \
                                  f"Image Width: {image.width}px\n" \
                                  f"Image Height: {image.height}px\n"
                await message.reply_text(resized_details)

                os.remove('resized_image.jpg')
            except ValueError:
                await message.reply_text("Invalid file size. Please enter a valid size in kilobytes (KB).")

            del user_settings[chat_id]

        elif user_settings[chat_id]['command_state'] == 'enter_dimensions':
            try:
                dimensions = message.text.strip().split(' ')
                width, height = int(dimensions[0]), int(dimensions[1])

                image = user_settings[chat_id]['image']
                image.thumbnail((width, height), Image.LANCZOS)

                output_path = 'resized_image.jpg'
                image.save(output_path)

                with open(output_path, 'rb') as file:
                    await client.send_photo(chat_id, file)

                resized_details = f"Resized Image Details:\n\n" \
                                  f"File Name: resized_image.jpg\n" \
                                  f"File Size: {os.path.getsize(output_path) / 1024:.2f} KB\n" \
                                  f"Image Width: {image.width}px\n" \
                                  f"Image Height: {image.height}px\n"
                await message.reply_text(resized_details)

                os.remove(output_path)
            except (IndexError, ValueError):
                await message.reply_text("Invalid dimensions. Please enter valid width and height values.")

            del user_settings[chat_id]

if __name__ == "__main__":
    if not os.path.exists('merged_pdfs'):
        os.makedirs('merged_pdfs')
    app.run()
